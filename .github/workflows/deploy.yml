name: Build and Deploy Production

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

#      - name: Build and push auth-api image
#        uses: docker/build-push-action@v5
#        with:
#          context: ./api-auth
#          push: true
#          tags: ${{ env.REGISTRY }}/${{ github.actor }}/auth-api:latest
#          platforms: linux/amd64
#          cache-from: type=gha
#          cache-to: type=gha,mode=max

      - name: Build and push chat-api image
        uses: docker/build-push-action@v5
        with:
          context: ./api-chat
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.actor }}/chat-api:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # === Job 2: Deploy to Production Server ===
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build-and-push # build-and-pushジョブの成功を待つ

    # --- ここからが正しい構造 ---
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_KEY }}
          # `script:` は `with:` の中に入ります
          script: |
            set -ex # -x を追加して、実行コマンドをログに出力する

            # --- ステップ0: SSHエージェントのセットアップ ---
            echo "### Setting up SSH agent..."
            eval "$(ssh-agent -s)"
            echo "${{ secrets.DEPLOY_KEY }}" > deploy_key.pem
            chmod 600 deploy_key.pem
            ssh-add deploy_key.pem

            # --- ステップ1: Gitリポジトリの同期 ---
            echo "### Syncing repository..."
            if ! git -C /home/ubuntu/chat-system status > /dev/null 2>&1; then
              echo "Git repository not found or invalid. Cloning fresh..."
              rm -rf /home/ubuntu/chat-system
              git clone git@github.com:${{ env.IMAGE_NAME }}.git /home/ubuntu/chat-system
            fi
            cd /home/ubuntu/chat-system
            git fetch origin
            git reset --hard origin/main

            # --- ステップ2: GHCRへのログイン ---
            echo "### Logging in to GHCR..."
            echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # --- ステップ3: Dockerイメージのプル（レースコンディション対策） ---
            echo "### Pulling new images with retry..."
            ATTEMPTS=0
            MAX_ATTEMPTS=3
            PULL_SUCCESS=false
            until ${PULL_SUCCESS} || [ ${ATTEMPTS} -eq ${MAX_ATTEMPTS} ]; do
              ATTEMPTS=$((ATTEMPTS+1))
              echo "Attempt ${ATTEMPTS} of ${MAX_ATTEMPTS} to pull images..."
              if docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull; then
                PULL_SUCCESS=true
                echo "Successfully pulled images."
              else
                echo "Pull failed. Waiting 15 seconds before retrying..."
                sleep 15
              fi
            done

            if ! ${PULL_SUCCESS}; then
              echo "Failed to pull images after ${MAX_ATTEMPTS} attempts."
              exit 1
            fi
            
            # --- ステップ4: アプリケーションの再起動 ---
            echo "### Restarting services with docker-compose..."
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans

            # --- ステップ5: 状態確認（デバッグ用） ---
            echo "### Checking container status..."
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps

            # --- ステップ6: 不要になった古いDockerイメージを削除 ---
            echo "### Pruning old images..."
            docker image prune -f